'use strict';

goog.provide('Blockly.Arduino.Dofrobot');

goog.require('Blockly.Arduino');



//舵机
Blockly.Arduino.Dofrobot_dj = function() {
  var dropdown_pin = Blockly.Arduino.valueToCode(this, 'PIN',Blockly.Arduino.ORDER_ATOMIC);
  var value_degree = Blockly.Arduino.valueToCode(this, 'DEGREE', Blockly.Arduino.ORDER_ATOMIC);
  //value_degree = value_degree.replace('(','').replace(')','')
  var delay_time = Blockly.Arduino.valueToCode(this, 'DELAY_TIME', Blockly.Arduino.ORDER_ATOMIC) || '0'
  //delay_time = delay_time.replace('(','').replace(')','');
  
  Blockly.Arduino.definitions_['define_servo'] = '#include <Servo.h>';
  Blockly.Arduino.definitions_['var_servo'+dropdown_pin] = 'Servo servo_'+dropdown_pin+';';
  Blockly.Arduino.setups_['setup_servo_'+dropdown_pin] = 'servo_'+dropdown_pin+'.attach('+dropdown_pin+');';
  
  var code = 'servo_'+dropdown_pin+'.write('+value_degree+');\n'+'delay(' + delay_time + ');\n';
  return code;
};
Blockly.Arduino.Dofrobot_forward = function() {
  var dropdown_pin = this.getTitleValue('PIN');
   Blockly.Arduino.definitions_['define_irev'] = '#include "VarSpeedServo.h" \n#include <NewPing.h>';
   Blockly.Arduino.definitions_['define_irevee'] = 'VarSpeedServo RU; \nVarSpeedServo RL;\nVarSpeedServo LU;\nVarSpeedServo LL;\nNewPing sonar(5,4,200); \nconst int vel = '+dropdown_pin+', vel_Back = 15, vel_turn= 15;\nconst int delay_Forward = 300, delay_Back = 750, delay_turn = 500;\nint vel_Dance1 = 30,vel_Dance2 = 25,    vel_Dance3 = 40;  \nint delay_Dance1 = 300,delay_Dance2 = 750, delay_Dance3 = 200;\n int vel_Dance4 = 20, delay_Dance4 = 400;\nconst int array_cal[4] = {102,85,90,90};\nint RU_Degree = 0, LU_Degree = array_cal[2] + 5;\nconst int num1 = 6;\nconst int array_forward[num1][4] = \n{\n{0,-40,0,-20},\n{30,-40,30,-20},\n{30,0,30,0},\n{0,20,0,40},\n{-30,20,-30,40},{-30,0,-30,0},\n};\nconst int num3 = 5;\nconst int array_left[num3][4] = \n{\n{-40,0,-20,0},\n {-40,30,-20,30},\n {0,30,0,30},\n {30,0,30,0},\n {0,0,0,0},\n};\nconst int num4 = 5; \n const int array_right[num4][4] = { \n{40,0,20,0},\n{40,-30,20,-30},\n {0,-30,0,-30},\n{-30,0,-30,0},\n{0,0,0,0},\n};\n const int num_dance1 = 10; \nconst int array_dance1[num_dance1][4] ={ \n{0,-20,0,0},\n {0,-40,0,20},\n {0,-20,0,40},\n{0,0,0,20},\n{0,0,0,0},\n {0,0,0,20},\n{0,-20,0,40},\n{0,-40,0,20},\n {0,-20,0,0},\n {0,0,0,0},\n};const int num_dance2 = 32; \nconst int array_dance2[num_dance2][4] = { \n{20,0,40,0},\n{20,-30,10,-30},\n {20,-30,10,-30},\n{20,-30,40,-30},\n{20,-30,10,-30},\n{20,-30,40,-30},\n{20,0,40,-30},\n{20,80,40,-30},\n{20,0,40,-30},\n{20,-80,40,-30},\n{20,0,40,-30},\n{20,80,40,-30},\n{20,0,40,-30},\n{20,-30,40,-30},\n{20,0,40,0},\n{0,0,0,0},\n{-40,0,-20,0},\n{-40,40,-20,30},\n{-20,40,-20,30},\n{-40,40,-20,30},\n{-20,40,-20,30},\n{-40,40,-20,30},\n{-40,40,-20,0},\n{-40,40,-20,-80},\n{-40,40,-20,0},\n{-40,40,-20,80},\n{-40,40,-20,0},\n{-40,40,-20,-80},\n{-40,40,-20,0},\n{-40,40,-20,30},\n{-40,0,-20,0},\n{0,0,0,0}, };\nconst int num_dance4 = 20; \n const int array_dance4[num_dance4][4] = { \n {0,-20,0,0}, \n{0,-40,0,20}, \n{0,0,0,0}, \n {0,-20,0,20}, \n {0,0,0,0}, \n{0,-20,0,20}, \n {0,0,0,0}, \n  {0,-20,0,20}, \n {0,0,0,0}, \n{0,-50,0,50}, \n{0,0,0,0},\n{0,-50,0,50},\n{0,0,0,0},\n {0,-50,0,50},\n{0,0,0,0},\n {0,-40,0,40},\n{0,-40,0,40},\n{0,-60,0,60},\n{0,0,0,0,},};\nconst int num_dance3 = 8; \n const int array_dance3[num_dance3][4] ={ \n{0,-40,0,0}, \n {20,-30,20,20}, \n {40,0,40,30},\n{0,0,0,40},\n {-20,-20,-20,30},\n{-40,-30,-40,0},\n{0,-40,0,0},\n {0,0,0,0}, };\n';  
   Blockly.Arduino.definitions_['define_ireve'] ='#define RUN\nvoid Servo_Init()\n{\nRU.attach(9);\nRL.attach(10);\nLU.attach(11); \nLL.attach(12);\n}\nvoid Adjust()\n{ \n for(RU_Degree = array_cal[0] - 5; RU_Degree <= array_cal[0]; RU_Degree += 1) {\nRU.write(RU_Degree); \n LU.write(LU_Degree--);\ndelay(15); \n }\n}\nbool TooClose()\n{\nint tooclose = 0;\nfor(int a=0; a<5; a++) { \n delay(50);\nint din = sonar.ping_in();\nif (din < 7 && din > 0) tooclose++;\n }\nif (tooclose < 5) return 1;\nreturn 0;\n}\nvoid Forward()\n{\nfor(int x=0; x<num1; x++) {\n RU.slowmove (array_cal[0] + array_forward[x][0] , vel); \n RL.slowmove (array_cal[1] + array_forward[x][1] , vel);\n LU.slowmove (array_cal[2] + array_forward[x][2] , vel);\n LL.slowmove (array_cal[3] + array_forward[x][3] , vel);\n delay(delay_Forward);\n}\n}\nvoid Turnleft()\n{\n for(int z=0; z<2; z++) {  \nfor(int y=0; y<num3; y++) { \nRU.slowmove (array_cal[0] + array_left[y][0] , vel_Back);\nRL.slowmove (array_cal[1] + array_left[y][1] , vel_Back);\nLU.slowmove (array_cal[2] + array_left[y][2] , vel_Back);\nLL.slowmove (array_cal[3] + array_left[y][3] , vel_Back);\ndelay(delay_Back);\n}\n}\n}\nvoid Turnright(){ \nfor(int z=0; z<2; z++) {\n for(int y=0; y<num4; y++) { \nRU.slowmove (array_cal[0] + array_right[y][0] , vel_Back); \nRL.slowmove (array_cal[1] + array_right[y][1] , vel_Back); \nLU.slowmove (array_cal[2] + array_right[y][2] , vel_Back); \nLL.slowmove (array_cal[3] + array_right[y][3] , vel_Back); \ndelay(delay_Back);\n}}}\nvoid Slide_2_Left(int times){\nfor(int time1 = 0; time1 < times; time1++) {\nfor(int z=0; z<5; z++) {\nvel_Dance2 = 50;\nRU.slowmove (array_cal[0] + array_dance1[z][0] , vel_Dance1);\nLU.slowmove (array_cal[2] + array_dance1[z][2] , vel_Dance1); \n LL.slowmove (array_cal[3] + array_dance1[z][3] , vel_Dance1);\ndelay(delay_Dance1);}}}\nvoid Left_Foot_Support(){ \nfor(int z=0; z<16; z++) {\nif ( z > 5 && z < 14) {\n vel_Dance2 = 50;delay_Dance2 = 200; }\n else { \n vel_Dance2 = 25;\ndelay_Dance2 = 750; }\nRU.slowmove (array_cal[0] + array_dance2[z][0] , vel_Dance2);\nRL.slowmove (array_cal[1] + array_dance2[z][1] , vel_Dance2);\nLU.slowmove (array_cal[2] + array_dance2[z][2] , vel_Dance2);\n LL.slowmove (array_cal[3] + array_dance2[z][3] , vel_Dance2);\ndelay(delay_Dance2); }}\nvoid Dancing1_2(){ \nSlide_2_Left(2);\n Left_Foot_Support(); }\nvoid Dancing4() { \n for(int z=0; z<num_dance4; z++) { \n if ( z > 17) { \n vel_Dance4 = 10; \n delay_Dance4 = 1500;} \n else { \nvel_Dance4 = 40; \n delay_Dance4 = 400;} \n RU.slowmove (array_cal[0] + array_dance4[z][0] , vel_Dance4); \n RL.slowmove (array_cal[1] + array_dance4[z][1] , vel_Dance4); \n LU.slowmove (array_cal[2] + array_dance4[z][2] , vel_Dance4); \n LL.slowmove (array_cal[3] + array_dance4[z][3] , vel_Dance4); \n delay(delay_Dance4);}}\nvoid Dancing3(int Times = 1, int Vel = 40, int Delay = 250, int low = 0, int high = 0){ \nfor(int time3=0; time3<Times; time3++) { \n for(int z=0; z<6; z++) { if ( time3 > 1 && time3 < 4) { \n  vel_Dance3 = Vel; \ndelay_Dance3 = Delay; }\n else { vel_Dance3 = 40; \ndelay_Dance3 = 200;}\nRU.slowmove (array_cal[0] + array_dance3[z][0] , vel_Dance3); \nRL.slowmove (array_cal[1] + array_dance3[z][1] , vel_Dance3); \n LU.slowmove (array_cal[2] + array_dance3[z][2] , vel_Dance3);\n LL.slowmove (array_cal[3] + array_dance3[z][3] , vel_Dance3); \ndelay(delay_Dance3);}}\nfor(int z=6; z<8; z++) { \nRU.slowmove (array_cal[0] + array_dance3[z][0] , vel_Dance3);\nRL.slowmove (array_cal[1] + array_dance3[z][1] , vel_Dance3);\nLU.slowmove (array_cal[2] + array_dance3[z][2] , vel_Dance3);\nLL.slowmove (array_cal[3] + array_dance3[z][3] , vel_Dance3);\n delay(delay_Dance3);}}';
   Blockly.Arduino.setups_['setup_jz_'] ='#ifdef RUN \nServo_Init();\nAdjust();\nRL.slowmove (array_cal[1] , vel);\nLL.slowmove (array_cal[3] , vel);\n delay(2000);\n#endif\n ';
   var code =' Forward();\n  ';
  return code ;
};

/*Blockly.Arduino.Dofrobot_forward = function() {
//var x = Blockly.Arduino.valueToCode(this, 'X', Blockly.Arduino.ORDER_ATOMIC);
 var dropdown_pin = this.getTitleValue('PIN');
   Blockly.Arduino.definitions_['define_irev'] = '#include "VarSpeedServo.h" \n#include <NewPing.h>';
   Blockly.Arduino.definitions_['define_irevee'] = 'VarSpeedServo RU; \nVarSpeedServo RL;\nVarSpeedServo LU;\nVarSpeedServo LL;\nNewPing sonar(5,4,200); \nconst int vel = '+dropdown_pin+';const int vel_Back = '+dropdown_pin+';\nconst int delay_Forward = 750,delay_Back = 1000;\nconst int array_cal[4] = {90,90,90,90}; \nint RU_Degree = 0, LU_Degree = array_cal[2] + 5;\nconst int num1 = 6;\nconst int array_forward[num1][4] =\n{\n{0,-40,0,-20},\n {30,-40,30,-20},\n{30,0,30,0},\n{0,20,0,40},\n {-30,20,-30,40},\n {-30,0,-30,0},\n};   ';  
   Blockly.Arduino.definitions_['define_ireve'] ='const int num2 = 5;\nconst int array_turn[num2][4] = \n{\n  {-40,0,-20,0},\n {-40,30,-20,30},\n{0,30,0,30},\n{30,0,30,0},\n {0,0,0,0},\n};\n#define RUN\nvoid Servo_Init()\n{\nRU.attach(16);\nRL.attach(17);\nLU.attach(18); \nLL.attach(19);\n}\nvoid Adjust()\n{ \n for(RU_Degree = array_cal[0] - 5; RU_Degree <= array_cal[0]; RU_Degree += 1) {\nRU.write(RU_Degree); \n LU.write(LU_Degree--);\ndelay(15); \n}\n}void Forward()\n{\nfor(int x=0; x<num1; x++) {\n RU.slowmove (array_cal[0] + array_forward[x][0] , vel); \n RL.slowmove (array_cal[1] + array_forward[x][1] , vel);\n LU.slowmove (array_cal[2] + array_forward[x][2] , vel);\n LL.slowmove (array_cal[3] + array_forward[x][3] , vel);\n delay(delay_Forward);\n}\n} void Backward() {\nfor(int z=0; z<4; z++) { \nfor(int y=0; y<num2; y++) { \n  RU.slowmove (array_cal[0] + array_turn[y][0] , vel_Back);\nRL.slowmove (array_cal[1] + array_turn[y][1] , vel_Back);\nLU.slowmove (array_cal[2] + array_turn[y][2] , vel_Back);\nLL.slowmove (array_cal[3] + array_turn[y][3] , vel_Back);\n delay(delay_Back); }   }   }';
   Blockly.Arduino.setups_['setup_jz_'] ='#ifdef RUN \nServo_Init();\nAdjust();\nRL.slowmove (array_cal[1] , vel);\nLL.slowmove (array_cal[3] , vel);\n delay(2000);\n#endif\n ';
   var code =' Forward(); ';
  return code ;
};   */

//avoid 
Blockly.Arduino.Dofrobot_avoid= function() {
 var dropdown_pin = this.getTitleValue('PIN');
 var x = Blockly.Arduino.valueToCode(this, 'X', Blockly.Arduino.ORDER_ATOMIC);
  Blockly.Arduino.definitions_['define_irev'] = '#include "VarSpeedServo.h" \n#include <NewPing.h>';
   Blockly.Arduino.definitions_['define_irevee'] = 'VarSpeedServo RU; \nVarSpeedServo RL;\nVarSpeedServo LU;\nVarSpeedServo LL;\nNewPing sonar(5,4,200); \nconst int vel = '+dropdown_pin+',vel_Back=15;\nconst int delay_Forward = 300, delay_Back = 750;\nconst int array_cal[4] = {102,85,90,90}; \nint RU_Degree = 0, LU_Degree = array_cal[2] + 5;\nconst int num1 = 6;\nconst int array_forward[num1][4] =\n{\n{0,-40,0,-20},\n {30,-40,30,-20},\n{30,0,30,0},\n{0,20,0,40},\n {-30,20,-30,40},\n {-30,0,-30,0},\n};   ';  
   Blockly.Arduino.definitions_['define_ireve'] ='const int num2 = 5;\nconst int array_turn[num2][4] = \n{\n  {-40,0,20,0},\n {-40,30,-20,30},\n{0,30,0,30},\n{30,0,30,0},\n{0,0,0,0},\n};\n#define RUN\nvoid Servo_Init()\n{\nRU.attach(16);\nRL.attach(17);\nLU.attach(18); \nLL.attach(19);\n}\nvoid Adjust()\n{ \n for(RU_Degree = array_cal[0] - 5; RU_Degree <= array_cal[0]; RU_Degree += 1) {\nRU.write(RU_Degree); \n LU.write(LU_Degree--);\ndelay(15); \n }\n}\nbool TooClose()\n{\nint tooclose = 0;\nfor(int a=0; a<5; a++) { \n delay(50);\nint din = sonar.ping_in();\nif (din < '+x+' && din > 0) tooclose++;\n }\nif (tooclose < 5) return 1;\nreturn 0;\n}\nvoid Forward()\n{\nfor(int x=0; x<num1; x++) {\n RU.slowmove (array_cal[0] + array_forward[x][0] , vel); \n RL.slowmove (array_cal[1] + array_forward[x][1] , vel);\n LU.slowmove (array_cal[2] + array_forward[x][2] , vel);\n LL.slowmove (array_cal[3] + array_forward[x][3] , vel);\n delay(delay_Forward);\n}\n} \nvoid Backward()\n{ for(int z=0; z<2; z++) {\nfor(int y=0; y<num2; y++) { \nRU.slowmove (array_cal[0] + array_turn[y][0] , vel_Back); \n RL.slowmove (array_cal[1] + array_turn[y][1] , vel_Back);\n LU.slowmove (array_cal[2] + array_turn[y][2] , vel_Back);\nLL.slowmove (array_cal[3] + array_turn[y][3] , vel_Back);\ndelay(delay_Back);\n}\n}\n}  ';
   Blockly.Arduino.setups_['setup_jz_'] ='#ifdef RUN \nServo_Init();\nAdjust();\nRL.slowmove (array_cal[1] , vel);\nLL.slowmove (array_cal[3] , vel);\n delay(2000);\n#endif\n ';
   var code =' while(TooClose()) Forward();\nBackward(); ';
  return code ;
};

/*Blockly.Arduino.Dofrobot_avoid= function() {
 var dropdown_pin = this.getTitleValue('PIN');
 var x = Blockly.Arduino.valueToCode(this, 'X', Blockly.Arduino.ORDER_ATOMIC);
  Blockly.Arduino.definitions_['define_irev'] = '#include "VarSpeedServo.h" \n#include <NewPing.h>';
   Blockly.Arduino.definitions_['define_irevee'] = 'VarSpeedServo RU; \nVarSpeedServo RL;\nVarSpeedServo LU;\nVarSpeedServo LL;\nNewPing sonar(5,4,200); \nconst int vel = '+dropdown_pin+';const int vel_Back = '+dropdown_pin+';\nconst int delay_Forward = 750, delay_Back = 1000;\nconst int array_cal[4] = {90,90,90,90}; \nint RU_Degree = 0, LU_Degree = array_cal[2] + 5;\nconst int num1 = 6;\nconst int array_forward[num1][4] =\n{\n{0,-40,0,-20},\n {30,-40,30,-20},\n{30,0,30,0},\n{0,20,0,40},\n {-30,20,-30,40},\n {-30,0,-30,0},\n};   ';  
   Blockly.Arduino.definitions_['define_ireve'] ='const int num2 = 5;\nconst int array_turn[num2][4] = \n{\n  {-40,0,-20,0},\n {-40,30,-20,30},\n{0,30,0,30},\n{30,0,30,0},\n {0,0,0,0},\n};\n#define RUN\nvoid Servo_Init()\n{\nRU.attach(16);\nRL.attach(17);\nLU.attach(18); \nLL.attach(19);\n}\nvoid Adjust()\n{ \n for(RU_Degree = array_cal[0] - 5; RU_Degree <= array_cal[0]; RU_Degree += 1) {\nRU.write(RU_Degree); \n LU.write(LU_Degree--);\ndelay(15); \n }\n}\nbool TooClose()\n{\nint tooclose = 0;\nfor(int a=0; a<5; a++) { \n delay(50);\nint din = sonar.ping_in();\nif (din < '+x+' && din > 0) tooclose++;\n }\nif (tooclose < 5) return 1;\nreturn 0;\n}\nvoid Forward()\n{\nfor(int x=0; x<num1; x++) {\n RU.slowmove (array_cal[0] + array_forward[x][0] , vel); \n RL.slowmove (array_cal[1] + array_forward[x][1] , vel);\n LU.slowmove (array_cal[2] + array_forward[x][2] , vel);\n LL.slowmove (array_cal[3] + array_forward[x][3] , vel);\n delay(delay_Forward);\n}\n} \nvoid Backward()\n{\n for(int z=0; z<4; z++) {\nfor(int y=0; y<num2; y++) {\nRU.slowmove (array_cal[0] + array_turn[y][0] , vel_Back);\n RL.slowmove (array_cal[1] + array_turn[y][1] , vel_Back);\n LU.slowmove (array_cal[2] + array_turn[y][2] , vel_Back);\nLL.slowmove (array_cal[3] + array_turn[y][3] , vel_Back);\ndelay(delay_Back);\n}\n}\n}  ';
   Blockly.Arduino.setups_['setup_jz_'] ='#ifdef RUN \nServo_Init();\nAdjust();\nRL.slowmove (array_cal[1] , vel);\nLL.slowmove (array_cal[3] , vel);\n delay(2000);\n#endif\n ';
   var code =' while(TooClose()) Forward();\n Backward(); ';
  return code ;
};  */

/*Blockly.Arduino.Dofrobot_back = function() {
//var x = Blockly.Arduino.valueToCode(this, 'X', Blockly.Arduino.ORDER_ATOMIC);
 var dropdown_pin = this.getTitleValue('PIN');
   Blockly.Arduino.definitions_['define_irev'] = '#include "VarSpeedServo.h" \n#include <NewPing.h>';
   Blockly.Arduino.definitions_['define_irevee'] = 'VarSpeedServo RU; \nVarSpeedServo RL;\nVarSpeedServo LU;\nVarSpeedServo LL;\nNewPing sonar(5,4,200); \nconst int vel = 20, vel_Back = '+dropdown_pin+';\nconst int delay_Forward = 750, delay_Back = 1000;\nconst int array_cal[4] = {102,85,90,90}; \nint RU_Degree = 0, LU_Degree = array_cal[2] + 5;\nconst int num1 = 6;\nconst int array_forward[num1][4] =\n{\n{0,-40,0,-20},\n {30,-40,30,-20},\n{30,0,30,0},\n{0,20,0,40},\n {-30,20,-30,40},\n {-30,0,-30,0},\n};   ';  
   Blockly.Arduino.definitions_['define_ireve'] ='const int num2 = 5;\nconst int array_turn[num2][4] = \n{\n  {-40,0,-20,0},\n {-40,30,-20,30},\n{0,30,0,30},\n{30,0,30,0},\n {0,0,0,0},\n};\n#define RUN\nvoid Servo_Init()\n{\nRU.attach(16);\nRL.attach(17);\nLU.attach(18); \nLL.attach(19);\n}\nvoid Adjust()\n{ \n for(RU_Degree = array_cal[0] - 5; RU_Degree <= array_cal[0]; RU_Degree += 1) {\nRU.write(RU_Degree); \n LU.write(LU_Degree--);\ndelay(15); \n }\n}\nvoid Backward()\n{  \nfor(int y=0; y<num2; y++) {\n RU.slowmove (array_cal[0] + array_turn[y][0] , vel_Back); \n RL.slowmove (array_cal[1] + array_turn[y][1] , vel_Back);\n LU.slowmove (array_cal[2] + array_turn[y][2] , vel_Back);\n LL.slowmove (array_cal[3] + array_turn[y][3] , vel_Back);\n delay(delay_Forward);\n}\n}void Forward()\n{\nfor(int x=0; x<num1; x++) {\n RU.slowmove (array_cal[0] + array_forward[x][0] , vel); \n RL.slowmove (array_cal[1] + array_forward[x][1] , vel);\n LU.slowmove (array_cal[2] + array_forward[x][2] , vel);\n LL.slowmove (array_cal[3] + array_forward[x][3] , vel);\ndelay(delay_Forward);\n } } ';
   Blockly.Arduino.setups_['setup_jz_'] ='#ifdef RUN \nServo_Init();\nAdjust();\nRL.slowmove (array_cal[1] , vel);\nLL.slowmove (array_cal[3] , vel);\n delay(2000);\n#endif\n ';
   var code ='Backward(); \n';
  return code ;
};   */

Blockly.Arduino.Dofrobot_back = function() {
  var dropdown_pin = this.getTitleValue('PIN');
   Blockly.Arduino.definitions_['define_irev'] = '#include "VarSpeedServo.h" \n#include <NewPing.h>';
   Blockly.Arduino.definitions_['define_irevee'] = 'VarSpeedServo RU; \nVarSpeedServo RL;\nVarSpeedServo LU;\nVarSpeedServo LL;\nNewPing sonar(5,4,200); \nconst int vel = 30, vel_Back = '+dropdown_pin+', vel_turn= 15;\nconst int delay_Forward = 300, delay_Back = 750, delay_turn = 500;\nint vel_Dance1 = 30,vel_Dance2 = 25,    vel_Dance3 = 40;  \nint delay_Dance1 = 300,delay_Dance2 = 750, delay_Dance3 = 200;\n int vel_Dance4 = 20, delay_Dance4 = 400;\nconst int array_cal[4] = {102,85,90,90};\nint RU_Degree = 0, LU_Degree = array_cal[2] + 5;\nconst int num1 = 6;\nconst int array_forward[num1][4] = \n{\n{0,-40,0,-20},\n{30,-40,30,-20},\n{30,0,30,0},\n{0,20,0,40},\n{-30,20,-30,40},{-30,0,-30,0},\n};\nconst int num3 = 5;\nconst int array_left[num3][4] = \n{\n{-40,0,-20,0},\n {-40,30,-20,30},\n {0,30,0,30},\n {30,0,30,0},\n {0,0,0,0},\n};\nconst int num4 = 5; \n const int array_right[num4][4] = { \n{40,0,20,0},\n{40,-30,20,-30},\n {0,-30,0,-30},\n{-30,0,-30,0},\n{0,0,0,0},\n};\n const int num_dance1 = 10; \nconst int array_dance1[num_dance1][4] ={ \n{0,-20,0,0},\n {0,-40,0,20},\n {0,-20,0,40},\n{0,0,0,20},\n{0,0,0,0},\n {0,0,0,20},\n{0,-20,0,40},\n{0,-40,0,20},\n {0,-20,0,0},\n {0,0,0,0},\n};const int num_dance2 = 32; \nconst int array_dance2[num_dance2][4] = { \n{20,0,40,0},\n{20,-30,10,-30},\n {20,-30,10,-30},\n{20,-30,40,-30},\n{20,-30,10,-30},\n{20,-30,40,-30},\n{20,0,40,-30},\n{20,80,40,-30},\n{20,0,40,-30},\n{20,-80,40,-30},\n{20,0,40,-30},\n{20,80,40,-30},\n{20,0,40,-30},\n{20,-30,40,-30},\n{20,0,40,0},\n{0,0,0,0},\n{-40,0,-20,0},\n{-40,40,-20,30},\n{-20,40,-20,30},\n{-40,40,-20,30},\n{-20,40,-20,30},\n{-40,40,-20,30},\n{-40,40,-20,0},\n{-40,40,-20,-80},\n{-40,40,-20,0},\n{-40,40,-20,80},\n{-40,40,-20,0},\n{-40,40,-20,-80},\n{-40,40,-20,0},\n{-40,40,-20,30},\n{-40,0,-20,0},\n{0,0,0,0}, };\nconst int num_dance4 = 20; \n const int array_dance4[num_dance4][4] = { \n {0,-20,0,0}, \n{0,-40,0,20}, \n{0,0,0,0}, \n {0,-20,0,20}, \n {0,0,0,0}, \n{0,-20,0,20}, \n {0,0,0,0}, \n  {0,-20,0,20}, \n {0,0,0,0}, \n{0,-50,0,50}, \n{0,0,0,0},\n{0,-50,0,50},\n{0,0,0,0},\n {0,-50,0,50},\n{0,0,0,0},\n {0,-40,0,40},\n{0,-40,0,40},\n{0,-60,0,60},\n{0,0,0,0,},};\nconst int num_dance3 = 8; \n const int array_dance3[num_dance3][4] ={ \n{0,-40,0,0}, \n {20,-30,20,20}, \n {40,0,40,30},\n{0,0,0,40},\n {-20,-20,-20,30},\n{-40,-30,-40,0},\n{0,-40,0,0},\n {0,0,0,0}, };\nconst int num2 = 5; \nconst int array_back[num2][4] ={  \n {-40,0,-20,0}, \n {-40,30,-20,30},\n{0,30,0,30},\n{30,0,30,0},{0,0,0,0},\n};';  
   Blockly.Arduino.definitions_['define_ireve'] ='#define RUN\nvoid Servo_Init()\n{\nRU.attach(9);\nRL.attach(10);\nLU.attach(11); \nLL.attach(12);\n}\nvoid Adjust()\n{ \n for(RU_Degree = array_cal[0] - 5; RU_Degree <= array_cal[0]; RU_Degree += 1) {\nRU.write(RU_Degree); \n LU.write(LU_Degree--);\ndelay(15); \n }\n}\nbool TooClose()\n{\nint tooclose = 0;\nfor(int a=0; a<5; a++) { \n delay(50);\nint din = sonar.ping_in();\nif (din < 7 && din > 0) tooclose++;\n }\nif (tooclose < 5) return 1;\nreturn 0;\n}\nvoid Forward()\n{\nfor(int x=0; x<num1; x++) {\n RU.slowmove (array_cal[0] + array_forward[x][0] , vel); \n RL.slowmove (array_cal[1] + array_forward[x][1] , vel);\n LU.slowmove (array_cal[2] + array_forward[x][2] , vel);\n LL.slowmove (array_cal[3] + array_forward[x][3] , vel);\n delay(delay_Forward);\n}\n}\nvoid Turnleft()\n{\n for(int z=0; z<2; z++) {  \nfor(int y=0; y<num3; y++) { \nRU.slowmove (array_cal[0] + array_left[y][0] , vel_Back);\nRL.slowmove (array_cal[1] + array_left[y][1] , vel_Back);\nLU.slowmove (array_cal[2] + array_left[y][2] , vel_Back);\nLL.slowmove (array_cal[3] + array_left[y][3] , vel_Back);\ndelay(delay_Back);\n}\n}\n}\nvoid Turnright(){ \nfor(int z=0; z<2; z++) {\n for(int y=0; y<num4; y++) { \nRU.slowmove (array_cal[0] + array_right[y][0] , vel_Back); \nRL.slowmove (array_cal[1] + array_right[y][1] , vel_Back); \nLU.slowmove (array_cal[2] + array_right[y][2] , vel_Back); \nLL.slowmove (array_cal[3] + array_right[y][3] , vel_Back); \ndelay(delay_Back);\n}}}\nvoid Slide_2_Left(int times){\nfor(int time1 = 0; time1 < times; time1++) {\nfor(int z=0; z<5; z++) {\nvel_Dance2 = 50;\nRU.slowmove (array_cal[0] + array_dance1[z][0] , vel_Dance1);\nLU.slowmove (array_cal[2] + array_dance1[z][2] , vel_Dance1); \n LL.slowmove (array_cal[3] + array_dance1[z][3] , vel_Dance1);\ndelay(delay_Dance1);}}}\nvoid Left_Foot_Support(){ \nfor(int z=0; z<16; z++) {\nif ( z > 5 && z < 14) {\n vel_Dance2 = 50;delay_Dance2 = 200; }\n else { \n vel_Dance2 = 25;\ndelay_Dance2 = 750; }\nRU.slowmove (array_cal[0] + array_dance2[z][0] , vel_Dance2);\nRL.slowmove (array_cal[1] + array_dance2[z][1] , vel_Dance2);\nLU.slowmove (array_cal[2] + array_dance2[z][2] , vel_Dance2);\n LL.slowmove (array_cal[3] + array_dance2[z][3] , vel_Dance2);\ndelay(delay_Dance2); }}\nvoid Dancing1_2(){ \nSlide_2_Left(2);\n Left_Foot_Support(); }\nvoid Dancing4() { \n for(int z=0; z<num_dance4; z++) { \n if ( z > 17) { \n vel_Dance4 = 10; \n delay_Dance4 = 1500;} \n else { \nvel_Dance4 = 40; \n delay_Dance4 = 400;} \n RU.slowmove (array_cal[0] + array_dance4[z][0] , vel_Dance4); \n RL.slowmove (array_cal[1] + array_dance4[z][1] , vel_Dance4); \n LU.slowmove (array_cal[2] + array_dance4[z][2] , vel_Dance4); \n LL.slowmove (array_cal[3] + array_dance4[z][3] , vel_Dance4); \n delay(delay_Dance4);}}\nvoid Dancing3(int Times = 1, int Vel = 40, int Delay = 250, int low = 0, int high = 0){ \nfor(int time3=0; time3<Times; time3++) { \n for(int z=0; z<6; z++) { if ( time3 > 1 && time3 < 4) { \n  vel_Dance3 = Vel; \ndelay_Dance3 = Delay; }\n else { vel_Dance3 = 40; \ndelay_Dance3 = 200;}\nRU.slowmove (array_cal[0] + array_dance3[z][0] , vel_Dance3); \nRL.slowmove (array_cal[1] + array_dance3[z][1] , vel_Dance3); \n LU.slowmove (array_cal[2] + array_dance3[z][2] , vel_Dance3);\n LL.slowmove (array_cal[3] + array_dance3[z][3] , vel_Dance3); \ndelay(delay_Dance3);}}\nfor(int z=6; z<8; z++) { \nRU.slowmove (array_cal[0] + array_dance3[z][0] , vel_Dance3);\nRL.slowmove (array_cal[1] + array_dance3[z][1] , vel_Dance3);\nLU.slowmove (array_cal[2] + array_dance3[z][2] , vel_Dance3);\nLL.slowmove (array_cal[3] + array_dance3[z][3] , vel_Dance3);\n delay(delay_Dance3);}}\nvoid Backward(){   \n for(int y=0; y<num2; y++) { \n RU.slowmove (array_cal[0] + array_back[y][0] , vel_Back);\n RL.slowmove (array_cal[1] + array_back[y][1] , vel_Back); \n LU.slowmove (array_cal[2] + array_back[y][2] , vel_Back);  \n LL.slowmove (array_cal[3] + array_back[y][3] , vel_Back); \n delay(delay_Forward);}} \n';
   Blockly.Arduino.setups_['setup_jz_'] ='#ifdef RUN \nServo_Init();\nAdjust();\nRL.slowmove (array_cal[1] , vel);\nLL.slowmove (array_cal[3] , vel);\n delay(2000);\n#endif\n ';
   var code =' Backward();\n  ';
  return code ;
};


Blockly.Arduino.Dofrobot_csb = function () {
    var dropdown_pin1 = Blockly.Arduino.valueToCode(this, 'PIN1', Blockly.Arduino.ORDER_ATOMIC);
    var dropdown_pin2 = Blockly.Arduino.valueToCode(this, 'PIN2', Blockly.Arduino.ORDER_ATOMIC);
   Blockly.Arduino.definitions_['include_'] = ' #include <NewPing.h>;\n\
   #define TRIGGER_PIN ' + dropdown_pin1 + ' \n#define ECHO_PIN ' + dropdown_pin2 + '\n#define MAX_DISTANCE 600\nNewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE);\n '; 
    Blockly.Arduino.setups_['setup_output_' + dropdown_pin1] = 'Serial.begin(115200);';
 var code = ' delay(50);\n unsigned int uS = sonar.ping();\n Serial.print("Ping: ");\nSerial.print(uS / US_ROUNDTRIP_CM);\nSerial.println("cm");';
  return [code, Blockly.Arduino.ORDER_ATOMIC];
};

/*Blockly.Arduino.Dofrobot_chao = function() {
 var value_degree = Blockly.Arduino.valueToCode(this, 'DEGREE', Blockly.Arduino.ORDER_ATOMIC);
  //value_degree = value_degree.replace('(','').replace(')','')
  var delay_time = Blockly.Arduino.valueToCode(this, 'DELAY_TIME', Blockly.Arduino.ORDER_ATOMIC) || '0'
  Blockly.Arduino.definitions_['define_irev'] = '#include <NewPing.h>';
  Blockly.Arduino.definitions_['define_ireve'+dropdown_pin] = '#define TRIGGER_PIN '+value_degree+'  \n#define ECHO_PIN ' + delay_time + '\n #define MAX_DISTANCE 200 \nNewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE); ';                                                                                                                                                                                                                                                                                               
   var code = ' delay(50);\nunsigned int uS = sonar.ping();\nSerial.print("Ping: ");\nSerial.print(uS / US_ROUNDTRIP_CM);\n Serial.println("cm"); ';
 return code ;
};  */


Blockly.Arduino.Dofrobot_circle = function() {
  var dropdown_pin = this.getTitleValue('PIN');
   Blockly.Arduino.definitions_['define_irev'] = '#include "VarSpeedServo.h" \n#include <NewPing.h>';
   Blockly.Arduino.definitions_['define_irevee'] = 'VarSpeedServo RU; \nVarSpeedServo RL;\nVarSpeedServo LU;\nVarSpeedServo LL;\nNewPing sonar(5,4,200); \nconst int vel = 20, vel_Back = 10;\nconst int delay_Forward = 750, delay_Back = 750;\nconst int array_cal[4] = {105,85,80,85}; \nint RU_Degree = 0, LU_Degree = array_cal[2] + 5;\nconst int num1 = 6;\nconst int array_forward[num1][4] =\n{\n{0,-40,0,-20},\n {33,-40,27,-20},\n{33,0,27,0},\n{0,20,0,40},\n {-33,20,-27,40},\n {-33,0,-27,0},\n}; ';  
   Blockly.Arduino.definitions_['define_ireve'] ='#define RUN\nvoid Servo_Init()\n{\nRU.attach(9);\nRL.attach(10);\nLU.attach(11); \nLL.attach(12);\n}\nvoid Adjust()\n{ \n for(RU_Degree = array_cal[0] - 5; RU_Degree <= array_cal[0]; RU_Degree += 1) {\nRU.write(RU_Degree); \n LU.write(LU_Degree--);\ndelay(15); \n }\n}\nbool TooClose()\n{\nint tooclose = 0;\nfor(int a=0; a<5; a++) { \n delay(50);\nint din = sonar.ping_in();\nif (din < 7 && din > 0) tooclose++;\n }\nif (tooclose < 5) return 1;\nreturn 0;\n}\nvoid Circle()\n{\nfor(int x=0; x<num1; x++) {\n RU.slowmove (array_cal[0] + array_forward[x][0] , vel); \n RL.slowmove (array_cal[1] + array_forward[x][1] , vel);\n LU.slowmove (array_cal[2] + array_forward[x][2] , vel);\n LL.slowmove (array_cal[3] + array_forward[x][3] , vel);\n delay(delay_Forward);\n}\n}  ';
   Blockly.Arduino.setups_['setup_jz_'] ='#ifdef RUN \nServo_Init();\nAdjust();\nRL.slowmove (array_cal[1] , vel);\nLL.slowmove (array_cal[3] , vel);\n delay(2000);\n#endif\n ';
   var code ='Circle();';
  return code ;
};

Blockly.Arduino.Dofrobot_left = function() {
  var dropdown_pin = this.getTitleValue('PIN');
   Blockly.Arduino.definitions_['define_irev'] = '#include "VarSpeedServo.h" \n#include <NewPing.h>';
   Blockly.Arduino.definitions_['define_irevee'] = 'VarSpeedServo RU; \nVarSpeedServo RL;\nVarSpeedServo LU;\nVarSpeedServo LL;\nNewPing sonar(5,4,200); \nconst int vel = 50, vel_Back = 15, vel_turn= 15;\nconst int delay_Forward = 300, delay_Back = 750, delay_turn = 500;\nint vel_Dance1 = 30,vel_Dance2 = 25,    vel_Dance3 = 40;  \nint delay_Dance1 = 300,delay_Dance2 = 750, delay_Dance3 = 200;\n int vel_Dance4 = 20, delay_Dance4 = 400;\nconst int array_cal[4] = {102,85,90,90};\nint RU_Degree = 0, LU_Degree = array_cal[2] + 5;\nconst int num1 = 6;\nconst int array_forward[num1][4] = \n{\n{0,-40,0,-20},\n{30,-40,30,-20},\n{30,0,30,0},\n{0,20,0,40},\n{-30,20,-30,40},{-30,0,-30,0},\n};\nconst int num3 = 5;\nconst int array_left[num3][4] = \n{\n{-40,0,-20,0},\n {-40,30,-20,30},\n {0,30,0,30},\n {30,0,30,0},\n {0,0,0,0},\n};\nconst int num4 = 5; \n const int array_right[num4][4] = { \n{40,0,20,0},\n{40,-30,20,-30},\n {0,-30,0,-30},\n{-30,0,-30,0},\n{0,0,0,0},\n};\n const int num_dance1 = 10; \nconst int array_dance1[num_dance1][4] ={ \n{0,-20,0,0},\n {0,-40,0,20},\n {0,-20,0,40},\n{0,0,0,20},\n{0,0,0,0},\n {0,0,0,20},\n{0,-20,0,40},\n{0,-40,0,20},\n {0,-20,0,0},\n {0,0,0,0},\n};const int num_dance2 = 32; \nconst int array_dance2[num_dance2][4] = { \n{20,0,40,0},\n{20,-30,10,-30},\n {20,-30,10,-30},\n{20,-30,40,-30},\n{20,-30,10,-30},\n{20,-30,40,-30},\n{20,0,40,-30},\n{20,80,40,-30},\n{20,0,40,-30},\n{20,-80,40,-30},\n{20,0,40,-30},\n{20,80,40,-30},\n{20,0,40,-30},\n{20,-30,40,-30},\n{20,0,40,0},\n{0,0,0,0},\n{-40,0,-20,0},\n{-40,40,-20,30},\n{-20,40,-20,30},\n{-40,40,-20,30},\n{-20,40,-20,30},\n{-40,40,-20,30},\n{-40,40,-20,0},\n{-40,40,-20,-80},\n{-40,40,-20,0},\n{-40,40,-20,80},\n{-40,40,-20,0},\n{-40,40,-20,-80},\n{-40,40,-20,0},\n{-40,40,-20,30},\n{-40,0,-20,0},\n{0,0,0,0}, };\nconst int num_dance4 = 20; \n const int array_dance4[num_dance4][4] = { \n {0,-20,0,0}, \n{0,-40,0,20}, \n{0,0,0,0}, \n {0,-20,0,20}, \n {0,0,0,0}, \n{0,-20,0,20}, \n {0,0,0,0}, \n  {0,-20,0,20}, \n {0,0,0,0}, \n{0,-50,0,50}, \n{0,0,0,0},\n{0,-50,0,50},\n{0,0,0,0},\n {0,-50,0,50},\n{0,0,0,0},\n {0,-40,0,40},\n{0,-40,0,40},\n{0,-60,0,60},\n{0,0,0,0,},};\nconst int num_dance3 = 8; \n const int array_dance3[num_dance3][4] ={ \n{0,-40,0,0}, \n {20,-30,20,20}, \n {40,0,40,30},\n{0,0,0,40},\n {-20,-20,-20,30},\n{-40,-30,-40,0},\n{0,-40,0,0},\n {0,0,0,0}, };\n';  
   Blockly.Arduino.definitions_['define_ireve'] ='#define RUN\nvoid Servo_Init()\n{\nRU.attach(9);\nRL.attach(10);\nLU.attach(11); \nLL.attach(12);\n}\nvoid Adjust()\n{ \n for(RU_Degree = array_cal[0] - 5; RU_Degree <= array_cal[0]; RU_Degree += 1) {\nRU.write(RU_Degree); \n LU.write(LU_Degree--);\ndelay(15); \n }\n}\nbool TooClose()\n{\nint tooclose = 0;\nfor(int a=0; a<5; a++) { \n delay(50);\nint din = sonar.ping_in();\nif (din < 7 && din > 0) tooclose++;\n }\nif (tooclose < 5) return 1;\nreturn 0;\n}\nvoid Forward()\n{\nfor(int x=0; x<num1; x++) {\n RU.slowmove (array_cal[0] + array_forward[x][0] , vel); \n RL.slowmove (array_cal[1] + array_forward[x][1] , vel);\n LU.slowmove (array_cal[2] + array_forward[x][2] , vel);\n LL.slowmove (array_cal[3] + array_forward[x][3] , vel);\n delay(delay_Forward);\n}\n}\nvoid Turnleft()\n{\n for(int z=0; z<2; z++) {  \nfor(int y=0; y<num3; y++) { \nRU.slowmove (array_cal[0] + array_left[y][0] , vel_Back);\nRL.slowmove (array_cal[1] + array_left[y][1] , vel_Back);\nLU.slowmove (array_cal[2] + array_left[y][2] , vel_Back);\nLL.slowmove (array_cal[3] + array_left[y][3] , vel_Back);\ndelay(delay_Back);\n}\n}\n}\nvoid Turnright(){ \nfor(int z=0; z<2; z++) {\n for(int y=0; y<num4; y++) { \nRU.slowmove (array_cal[0] + array_right[y][0] , vel_Back); \nRL.slowmove (array_cal[1] + array_right[y][1] , vel_Back); \nLU.slowmove (array_cal[2] + array_right[y][2] , vel_Back); \nLL.slowmove (array_cal[3] + array_right[y][3] , vel_Back); \ndelay(delay_Back);\n}}}\nvoid Slide_2_Left(int times){\nfor(int time1 = 0; time1 < times; time1++) {\nfor(int z=0; z<5; z++) {\nvel_Dance2 = 50;\nRU.slowmove (array_cal[0] + array_dance1[z][0] , vel_Dance1);\nLU.slowmove (array_cal[2] + array_dance1[z][2] , vel_Dance1); \n LL.slowmove (array_cal[3] + array_dance1[z][3] , vel_Dance1);\ndelay(delay_Dance1);}}}\nvoid Left_Foot_Support(){ \nfor(int z=0; z<16; z++) {\nif ( z > 5 && z < 14) {\n vel_Dance2 = 50;delay_Dance2 = 200; }\n else { \n vel_Dance2 = 25;\ndelay_Dance2 = 750; }\nRU.slowmove (array_cal[0] + array_dance2[z][0] , vel_Dance2);\nRL.slowmove (array_cal[1] + array_dance2[z][1] , vel_Dance2);\nLU.slowmove (array_cal[2] + array_dance2[z][2] , vel_Dance2);\n LL.slowmove (array_cal[3] + array_dance2[z][3] , vel_Dance2);\ndelay(delay_Dance2); }}\nvoid Dancing1_2(){ \nSlide_2_Left(2);\n Left_Foot_Support(); }\nvoid Dancing4() { \n for(int z=0; z<num_dance4; z++) { \n if ( z > 17) { \n vel_Dance4 = 10; \n delay_Dance4 = 1500;} \n else { \nvel_Dance4 = 40; \n delay_Dance4 = 400;} \n RU.slowmove (array_cal[0] + array_dance4[z][0] , vel_Dance4); \n RL.slowmove (array_cal[1] + array_dance4[z][1] , vel_Dance4); \n LU.slowmove (array_cal[2] + array_dance4[z][2] , vel_Dance4); \n LL.slowmove (array_cal[3] + array_dance4[z][3] , vel_Dance4); \n delay(delay_Dance4);}}\nvoid Dancing3(int Times = 1, int Vel = 40, int Delay = 250, int low = 0, int high = 0){ \nfor(int time3=0; time3<Times; time3++) { \n for(int z=0; z<6; z++) { if ( time3 > 1 && time3 < 4) { \n  vel_Dance3 = Vel; \ndelay_Dance3 = Delay; }\n else { vel_Dance3 = 40; \ndelay_Dance3 = 200;}\nRU.slowmove (array_cal[0] + array_dance3[z][0] , vel_Dance3); \nRL.slowmove (array_cal[1] + array_dance3[z][1] , vel_Dance3); \n LU.slowmove (array_cal[2] + array_dance3[z][2] , vel_Dance3);\n LL.slowmove (array_cal[3] + array_dance3[z][3] , vel_Dance3); \ndelay(delay_Dance3);}}\nfor(int z=6; z<8; z++) { \nRU.slowmove (array_cal[0] + array_dance3[z][0] , vel_Dance3);\nRL.slowmove (array_cal[1] + array_dance3[z][1] , vel_Dance3);\nLU.slowmove (array_cal[2] + array_dance3[z][2] , vel_Dance3);\nLL.slowmove (array_cal[3] + array_dance3[z][3] , vel_Dance3);\n delay(delay_Dance3);}}';
   Blockly.Arduino.setups_['setup_jz_'] ='#ifdef RUN \nServo_Init();\nAdjust();\nRL.slowmove (array_cal[1] , vel);\nLL.slowmove (array_cal[3] , vel);\n delay(2000);\n#endif\n ';
   var code =' Turnleft();\n  ';
  return code ;
};


Blockly.Arduino.Dofrobot_turnright = function() {
  var dropdown_pin = this.getTitleValue('PIN');
   Blockly.Arduino.definitions_['define_irev'] = '#include "VarSpeedServo.h" \n#include <NewPing.h>';
   Blockly.Arduino.definitions_['define_irevee'] = 'VarSpeedServo RU; \nVarSpeedServo RL;\nVarSpeedServo LU;\nVarSpeedServo LL;\nNewPing sonar(5,4,200); \nconst int vel = 50, vel_Back = 15, vel_turn= 15;\nconst int delay_Forward = 300, delay_Back = 750, delay_turn = 500;\nint vel_Dance1 = 30,vel_Dance2 = 25,    vel_Dance3 = 40;  \nint delay_Dance1 = 300,delay_Dance2 = 750, delay_Dance3 = 200;\n int vel_Dance4 = 20, delay_Dance4 = 400;\nconst int array_cal[4] = {102,85,90,90};\nint RU_Degree = 0, LU_Degree = array_cal[2] + 5;\nconst int num1 = 6;\nconst int array_forward[num1][4] = \n{\n{0,-40,0,-20},\n{30,-40,30,-20},\n{30,0,30,0},\n{0,20,0,40},\n{-30,20,-30,40},{-30,0,-30,0},\n};\nconst int num3 = 5;\nconst int array_left[num3][4] = \n{\n{-40,0,-20,0},\n {-40,30,-20,30},\n {0,30,0,30},\n {30,0,30,0},\n {0,0,0,0},\n};\nconst int num4 = 5; \n const int array_right[num4][4] = { \n{40,0,20,0},\n{40,-30,20,-30},\n {0,-30,0,-30},\n{-30,0,-30,0},\n{0,0,0,0},\n};\n const int num_dance1 = 10; \nconst int array_dance1[num_dance1][4] ={ \n{0,-20,0,0},\n {0,-40,0,20},\n {0,-20,0,40},\n{0,0,0,20},\n{0,0,0,0},\n {0,0,0,20},\n{0,-20,0,40},\n{0,-40,0,20},\n {0,-20,0,0},\n {0,0,0,0},\n};const int num_dance2 = 32; \nconst int array_dance2[num_dance2][4] = { \n{20,0,40,0},\n{20,-30,10,-30},\n {20,-30,10,-30},\n{20,-30,40,-30},\n{20,-30,10,-30},\n{20,-30,40,-30},\n{20,0,40,-30},\n{20,80,40,-30},\n{20,0,40,-30},\n{20,-80,40,-30},\n{20,0,40,-30},\n{20,80,40,-30},\n{20,0,40,-30},\n{20,-30,40,-30},\n{20,0,40,0},\n{0,0,0,0},\n{-40,0,-20,0},\n{-40,40,-20,30},\n{-20,40,-20,30},\n{-40,40,-20,30},\n{-20,40,-20,30},\n{-40,40,-20,30},\n{-40,40,-20,0},\n{-40,40,-20,-80},\n{-40,40,-20,0},\n{-40,40,-20,80},\n{-40,40,-20,0},\n{-40,40,-20,-80},\n{-40,40,-20,0},\n{-40,40,-20,30},\n{-40,0,-20,0},\n{0,0,0,0}, };\nconst int num_dance4 = 20; \n const int array_dance4[num_dance4][4] = { \n {0,-20,0,0}, \n{0,-40,0,20}, \n{0,0,0,0}, \n {0,-20,0,20}, \n {0,0,0,0}, \n{0,-20,0,20}, \n {0,0,0,0}, \n  {0,-20,0,20}, \n {0,0,0,0}, \n{0,-50,0,50}, \n{0,0,0,0},\n{0,-50,0,50},\n{0,0,0,0},\n {0,-50,0,50},\n{0,0,0,0},\n {0,-40,0,40},\n{0,-40,0,40},\n{0,-60,0,60},\n{0,0,0,0,},};\nconst int num_dance3 = 8; \n const int array_dance3[num_dance3][4] ={ \n{0,-40,0,0}, \n {20,-30,20,20}, \n {40,0,40,30},\n{0,0,0,40},\n {-20,-20,-20,30},\n{-40,-30,-40,0},\n{0,-40,0,0},\n {0,0,0,0}, };\n';  
   Blockly.Arduino.definitions_['define_ireve'] ='#define RUN\nvoid Servo_Init()\n{\nRU.attach(9);\nRL.attach(10);\nLU.attach(11); \nLL.attach(12);\n}\nvoid Adjust()\n{ \n for(RU_Degree = array_cal[0] - 5; RU_Degree <= array_cal[0]; RU_Degree += 1) {\nRU.write(RU_Degree); \n LU.write(LU_Degree--);\ndelay(15); \n }\n}\nbool TooClose()\n{\nint tooclose = 0;\nfor(int a=0; a<5; a++) { \n delay(50);\nint din = sonar.ping_in();\nif (din < 7 && din > 0) tooclose++;\n }\nif (tooclose < 5) return 1;\nreturn 0;\n}\nvoid Forward()\n{\nfor(int x=0; x<num1; x++) {\n RU.slowmove (array_cal[0] + array_forward[x][0] , vel); \n RL.slowmove (array_cal[1] + array_forward[x][1] , vel);\n LU.slowmove (array_cal[2] + array_forward[x][2] , vel);\n LL.slowmove (array_cal[3] + array_forward[x][3] , vel);\n delay(delay_Forward);\n}\n}\nvoid Turnleft()\n{\n for(int z=0; z<2; z++) {  \nfor(int y=0; y<num3; y++) { \nRU.slowmove (array_cal[0] + array_left[y][0] , vel_Back);\nRL.slowmove (array_cal[1] + array_left[y][1] , vel_Back);\nLU.slowmove (array_cal[2] + array_left[y][2] , vel_Back);\nLL.slowmove (array_cal[3] + array_left[y][3] , vel_Back);\ndelay(delay_Back);\n}\n}\n}\nvoid Turnright(){ \nfor(int z=0; z<2; z++) {\n for(int y=0; y<num4; y++) { \nRU.slowmove (array_cal[0] + array_right[y][0] , vel_Back); \nRL.slowmove (array_cal[1] + array_right[y][1] , vel_Back); \nLU.slowmove (array_cal[2] + array_right[y][2] , vel_Back); \nLL.slowmove (array_cal[3] + array_right[y][3] , vel_Back); \ndelay(delay_Back);\n}}}\nvoid Slide_2_Left(int times){\nfor(int time1 = 0; time1 < times; time1++) {\nfor(int z=0; z<5; z++) {\nvel_Dance2 = 50;\nRU.slowmove (array_cal[0] + array_dance1[z][0] , vel_Dance1);\nLU.slowmove (array_cal[2] + array_dance1[z][2] , vel_Dance1); \n LL.slowmove (array_cal[3] + array_dance1[z][3] , vel_Dance1);\ndelay(delay_Dance1);}}}\nvoid Left_Foot_Support(){ \nfor(int z=0; z<16; z++) {\nif ( z > 5 && z < 14) {\n vel_Dance2 = 50;delay_Dance2 = 200; }\n else { \n vel_Dance2 = 25;\ndelay_Dance2 = 750; }\nRU.slowmove (array_cal[0] + array_dance2[z][0] , vel_Dance2);\nRL.slowmove (array_cal[1] + array_dance2[z][1] , vel_Dance2);\nLU.slowmove (array_cal[2] + array_dance2[z][2] , vel_Dance2);\n LL.slowmove (array_cal[3] + array_dance2[z][3] , vel_Dance2);\ndelay(delay_Dance2); }}\nvoid Dancing1_2(){ \nSlide_2_Left(2);\n Left_Foot_Support(); }\nvoid Dancing4() { \n for(int z=0; z<num_dance4; z++) { \n if ( z > 17) { \n vel_Dance4 = 10; \n delay_Dance4 = 1500;} \n else { \nvel_Dance4 = 40; \n delay_Dance4 = 400;} \n RU.slowmove (array_cal[0] + array_dance4[z][0] , vel_Dance4); \n RL.slowmove (array_cal[1] + array_dance4[z][1] , vel_Dance4); \n LU.slowmove (array_cal[2] + array_dance4[z][2] , vel_Dance4); \n LL.slowmove (array_cal[3] + array_dance4[z][3] , vel_Dance4); \n delay(delay_Dance4);}}\nvoid Dancing3(int Times = 1, int Vel = 40, int Delay = 250, int low = 0, int high = 0){ \nfor(int time3=0; time3<Times; time3++) { \n for(int z=0; z<6; z++) { if ( time3 > 1 && time3 < 4) { \n  vel_Dance3 = Vel; \ndelay_Dance3 = Delay; }\n else { vel_Dance3 = 40; \ndelay_Dance3 = 200;}\nRU.slowmove (array_cal[0] + array_dance3[z][0] , vel_Dance3); \nRL.slowmove (array_cal[1] + array_dance3[z][1] , vel_Dance3); \n LU.slowmove (array_cal[2] + array_dance3[z][2] , vel_Dance3);\n LL.slowmove (array_cal[3] + array_dance3[z][3] , vel_Dance3); \ndelay(delay_Dance3);}}\nfor(int z=6; z<8; z++) { \nRU.slowmove (array_cal[0] + array_dance3[z][0] , vel_Dance3);\nRL.slowmove (array_cal[1] + array_dance3[z][1] , vel_Dance3);\nLU.slowmove (array_cal[2] + array_dance3[z][2] , vel_Dance3);\nLL.slowmove (array_cal[3] + array_dance3[z][3] , vel_Dance3);\n delay(delay_Dance3);}}';
   Blockly.Arduino.setups_['setup_jz_'] ='#ifdef RUN \nServo_Init();\nAdjust();\nRL.slowmove (array_cal[1] , vel);\nLL.slowmove (array_cal[3] , vel);\n delay(2000);\n#endif\n ';
   var code =' Turnright(); \n';
  return code ;
};

/*Blockly.Arduino.Dofrobot_turnright = function() {
  var dropdown_pin = this.getTitleValue('PIN');
   Blockly.Arduino.definitions_['define_irev'] = '#include "VarSpeedServo.h" \n#include <NewPing.h>';
   Blockly.Arduino.definitions_['define_irevee'] = 'VarSpeedServo RU; \nVarSpeedServo RL;\nVarSpeedServo LU;\nVarSpeedServo LL;\nNewPing sonar(5,4,200); \nconst int vel = 50, vel_Back = 15, vel_turn= 15;\nconst int delay_Forward = 300, delay_Back = 750, delay_turn = 500;\nconst int array_cal[4] = {102,85,90,90};\nint RU_Degree = 0, LU_Degree = array_cal[2] + 5;\nconst int num1 = 6;\nconst int array_forward[num1][4] = \n{\n{0,-40,0,-20},\n{30,-40,30,-20},\n{30,0,30,0},\n{0,20,0,40},\n{-30,20,-30,40},{-30,0,-30,0},\n};\nconst int num2 = 5;\nconst int array_turn[num2][4] = \n{\n{40,0,20,0},\n {40,-30,20,-30},\n {0,-30,0,-30},\n {-30,0,-30,0},\n {0,0,0,0},\n};';  
   Blockly.Arduino.definitions_['define_ireve'] ='#define RUN\nvoid Servo_Init()\n{\nRU.attach(16);\nRL.attach(17);\nLU.attach(18); \nLL.attach(19);\n}\nvoid Adjust()\n{ \n for(RU_Degree = array_cal[0] - 5; RU_Degree <= array_cal[0]; RU_Degree += 1) {\nRU.write(RU_Degree); \n LU.write(LU_Degree--);\ndelay(15); \n }\n}\nbool TooClose()\n{\nint tooclose = 0;\nfor(int a=0; a<5; a++) { \n delay(50);\nint din = sonar.ping_in();\nif (din < 7 && din > 0) tooclose++;\n }\nif (tooclose < 5) return 1;\nreturn 0;\n}\nvoid Forward()\n{\nfor(int x=0; x<num1; x++) {\n RU.slowmove (array_cal[0] + array_forward[x][0] , vel); \n RL.slowmove (array_cal[1] + array_forward[x][1] , vel);\n LU.slowmove (array_cal[2] + array_forward[x][2] , vel);\n LL.slowmove (array_cal[3] + array_forward[x][3] , vel);\n delay(delay_Forward);\n}\n}\nvoid Backward()\n{\n for(int z=0; z<2; z++) { \nfor(int y=0; y<num2; y++) { \nRU.slowmove (array_cal[0] + array_turn[y][0] , vel_Back);\nRL.slowmove (array_cal[1]+ array_turn[y][1] , vel_Back);\nLU.slowmove (array_cal[2] + array_turn[y][2] , vel_Back);\nLL.slowmove (array_cal[3] + array_turn[y][3] , vel_Back);\ndelay(delay_Back);\n}\n}\n}';
   Blockly.Arduino.setups_['setup_jz_'] ='#ifdef RUN \nServo_Init();\nAdjust();\nRL.slowmove (array_cal[1] , vel);\nLL.slowmove (array_cal[3] , vel);\n delay(2000);\n#endif\n ';
   var code ='  Backward();\nwhile(1); ';
  return code ;
}; */

/*Blockly.Arduino.Dofrobot_avoid= function() {
 var dropdown_pin = this.getTitleValue('PIN');
 var x = Blockly.Arduino.valueToCode(this, 'X', Blockly.Arduino.ORDER_ATOMIC);
  Blockly.Arduino.definitions_['define_irev'] = '#include "VarSpeedServo.h" \n#include <NewPing.h>';
   Blockly.Arduino.definitions_['define_irevee'] = 'VarSpeedServo RU; \nVarSpeedServo RL;\nVarSpeedServo LU;\nVarSpeedServo LL;\nNewPing sonar(5,4,200); \nconst int vel = '+dropdown_pin+';const int vel_turn = '+dropdown_pin+';\nconst int delay_Forward = 750, delay_Back = 1000,delay_turn = 500;\nconst int array_cal[4] = {90,90,90,90}; \nint RU_Degree = 0, LU_Degree = array_cal[2] + 5;\nconst int num1 = 6;\nconst int array_forward[num1][4] =\n{\n{0,-40,0,-20},\n {30,-40,30,-20},\n{30,0,30,0},\n{0,20,0,40},\n {-30,20,-30,40},\n {-30,0,-30,0},\n};   ';  
   Blockly.Arduino.definitions_['define_ireve'] ='const int num_Degree = 7;\nconst int array_Degree[num_Degree][4] = \n{\n  {0,15,0,15},\n {-15,30,-15,30},\n{-30,30,30,30},\n{-30,15,30,15},\n {-30,0,30,0},\n{-15,0,15,0},\n{0,0,0,0}\n};\n#define RUN\nvoid Servo_Init()\n{\nRU.attach(16);\nRL.attach(17);\nLU.attach(18); \nLL.attach(19);\n}\nvoid Adjust()\n{ \n for(RU_Degree = array_cal[0] - 5; RU_Degree <= array_cal[0]; RU_Degree += 1) {\nRU.write(RU_Degree); \n LU.write(LU_Degree--);\ndelay(15); \n }\n}\nbool TooClose()\n{\nint tooclose = 0;\nfor(int a=0; a<5; a++) { \n delay(50);\nint din = sonar.ping_in();\nif (din < '+x+' && din > 0) tooclose++;\n }\nif (tooclose < 5) return 1;\nreturn 0;\n}\nvoid Forward()\n{\nfor(int x=0; x<num1; x++) {\n RU.slowmove (array_cal[0] + array_forward[x][0] , vel); \n RL.slowmove (array_cal[1] + array_forward[x][1] , vel);\n LU.slowmove (array_cal[2] + array_forward[x][2] , vel);\n LL.slowmove (array_cal[3] + array_forward[x][3] , vel);\n delay(delay_Forward);\n}\n} \nvoid Wheel_90_Degree()\n{\nconst int array_cal_0 = 120, array_cal_2 = 70;\n   for(int z=0; z<5; z++) {\n for(int y=0; y<num_Degree; y++) {\nRU.slowmove (array_cal[0] + array_Degree[y][0] , vel_turn);\n RL.slowmove (array_cal[1] + array_Degree[y][1] , vel_turn);\n LU.slowmove (array_cal[2] + array_Degree[y][2] , vel_turn);\nLL.slowmove (array_cal[3] + array_Degree[y][3] , vel_turn);\ndelay(delay_turn);\n}\n}\n}  ';
   Blockly.Arduino.setups_['setup_jz_'] ='#ifdef RUN \nServo_Init();\nAdjust();\nRL.slowmove (array_cal[1] , vel);\nLL.slowmove (array_cal[3] , vel);\n delay(2000);\n#endif\n ';
   var code =' while(TooClose()) Forward();\nWheel_90_Degree(); ';
  return code ;
};   */


Blockly.Arduino.Dofrobot_kong = function() {
var dropdown_pin = this.getTitleValue('PIN');
Blockly.Arduino.definitions_['define_irev'] ='#include"VarSpeedServo.h" ';
 Blockly.Arduino.setups_['setup_jz_'] = '';
  var code =' ';
  return code ;
};

//leg lift
Blockly.Arduino.Dofrobot_leglift = function() {
  var dropdown_pin = this.getTitleValue('PIN');
   Blockly.Arduino.definitions_['define_irev'] = '#include "VarSpeedServo.h" \n#include <NewPing.h>';
   Blockly.Arduino.definitions_['define_irevee'] = 'VarSpeedServo RU; \nVarSpeedServo RL;\nVarSpeedServo LU;\nVarSpeedServo LL;\nNewPing sonar(5,4,200); \nconst int vel = 50, vel_Back = 15, vel_turn= 15;\nconst int delay_Forward = 300, delay_Back = 750, delay_turn = 500;\nint vel_Dance1 = 30,vel_Dance2 = 25,    vel_Dance3 = 40;  \nint delay_Dance1 = 300,delay_Dance2 = 750, delay_Dance3 = 200;\n int vel_Dance4 = 20, delay_Dance4 = 400;\nconst int array_cal[4] = {102,85,90,90};\nint RU_Degree = 0, LU_Degree = array_cal[2] + 5;\nconst int num1 = 6;\nconst int array_forward[num1][4] = \n{\n{0,-40,0,-20},\n{30,-40,30,-20},\n{30,0,30,0},\n{0,20,0,40},\n{-30,20,-30,40},{-30,0,-30,0},\n};\nconst int num3 = 5;\nconst int array_left[num3][4] = \n{\n{-40,0,-20,0},\n {-40,30,-20,30},\n {0,30,0,30},\n {30,0,30,0},\n {0,0,0,0},\n};\nconst int num4 = 5; \n const int array_right[num4][4] = { \n{40,0,20,0},\n{40,-30,20,-30},\n {0,-30,0,-30},\n{-30,0,-30,0},\n{0,0,0,0},\n};\n const int num_dance1 = 10; \nconst int array_dance1[num_dance1][4] ={ \n{0,-20,0,0},\n {0,-40,0,20},\n {0,-20,0,40},\n{0,0,0,20},\n{0,0,0,0},\n {0,0,0,20},\n{0,-20,0,40},\n{0,-40,0,20},\n {0,-20,0,0},\n {0,0,0,0},\n};const int num_dance2 = 32; \nconst int array_dance2[num_dance2][4] = { \n{20,0,40,0},\n{20,-30,10,-30},\n {20,-30,10,-30},\n{20,-30,40,-30},\n{20,-30,10,-30},\n{20,-30,40,-30},\n{20,0,40,-30},\n{20,80,40,-30},\n{20,0,40,-30},\n{20,-80,40,-30},\n{20,0,40,-30},\n{20,80,40,-30},\n{20,0,40,-30},\n{20,-30,40,-30},\n{20,0,40,0},\n{0,0,0,0},\n{-40,0,-20,0},\n{-40,40,-20,30},\n{-20,40,-20,30},\n{-40,40,-20,30},\n{-20,40,-20,30},\n{-40,40,-20,30},\n{-40,40,-20,0},\n{-40,40,-20,-80},\n{-40,40,-20,0},\n{-40,40,-20,80},\n{-40,40,-20,0},\n{-40,40,-20,-80},\n{-40,40,-20,0},\n{-40,40,-20,30},\n{-40,0,-20,0},\n{0,0,0,0}, };\nconst int num_dance4 = 20; \n const int array_dance4[num_dance4][4] = { \n {0,-20,0,0}, \n{0,-40,0,20}, \n{0,0,0,0}, \n {0,-20,0,20}, \n {0,0,0,0}, \n{0,-20,0,20}, \n {0,0,0,0}, \n  {0,-20,0,20}, \n {0,0,0,0}, \n{0,-50,0,50}, \n{0,0,0,0},\n{0,-50,0,50},\n{0,0,0,0},\n {0,-50,0,50},\n{0,0,0,0},\n {0,-40,0,40},\n{0,-40,0,40},\n{0,-60,0,60},\n{0,0,0,0,},};\nconst int num_dance3 = 8; \n const int array_dance3[num_dance3][4] ={ \n{0,-40,0,0}, \n {20,-30,20,20}, \n {40,0,40,30},\n{0,0,0,40},\n {-20,-20,-20,30},\n{-40,-30,-40,0},\n{0,-40,0,0},\n {0,0,0,0}, };\n';  
   Blockly.Arduino.definitions_['define_ireve'] ='#define RUN\nvoid Servo_Init()\n{\nRU.attach(9);\nRL.attach(10);\nLU.attach(11); \nLL.attach(12);\n}\nvoid Adjust()\n{ \n for(RU_Degree = array_cal[0] - 5; RU_Degree <= array_cal[0]; RU_Degree += 1) {\nRU.write(RU_Degree); \n LU.write(LU_Degree--);\ndelay(15); \n }\n}\nbool TooClose()\n{\nint tooclose = 0;\nfor(int a=0; a<5; a++) { \n delay(50);\nint din = sonar.ping_in();\nif (din < 7 && din > 0) tooclose++;\n }\nif (tooclose < 5) return 1;\nreturn 0;\n}\nvoid Forward()\n{\nfor(int x=0; x<num1; x++) {\n RU.slowmove (array_cal[0] + array_forward[x][0] , vel); \n RL.slowmove (array_cal[1] + array_forward[x][1] , vel);\n LU.slowmove (array_cal[2] + array_forward[x][2] , vel);\n LL.slowmove (array_cal[3] + array_forward[x][3] , vel);\n delay(delay_Forward);\n}\n}\nvoid Turnleft()\n{\n for(int z=0; z<2; z++) {  \nfor(int y=0; y<num3; y++) { \nRU.slowmove (array_cal[0] + array_left[y][0] , vel_Back);\nRL.slowmove (array_cal[1] + array_left[y][1] , vel_Back);\nLU.slowmove (array_cal[2] + array_left[y][2] , vel_Back);\nLL.slowmove (array_cal[3] + array_left[y][3] , vel_Back);\ndelay(delay_Back);\n}\n}\n}\nvoid Turnright(){ \nfor(int z=0; z<2; z++) {\n for(int y=0; y<num4; y++) { \nRU.slowmove (array_cal[0] + array_right[y][0] , vel_Back); \nRL.slowmove (array_cal[1] + array_right[y][1] , vel_Back); \nLU.slowmove (array_cal[2] + array_right[y][2] , vel_Back); \nLL.slowmove (array_cal[3] + array_right[y][3] , vel_Back); \ndelay(delay_Back);\n}}}\nvoid Slide_2_Left(int times){\nfor(int time1 = 0; time1 < times; time1++) {\nfor(int z=0; z<5; z++) {\nvel_Dance2 = 50;\nRU.slowmove (array_cal[0] + array_dance1[z][0] , vel_Dance1);\nLU.slowmove (array_cal[2] + array_dance1[z][2] , vel_Dance1); \n LL.slowmove (array_cal[3] + array_dance1[z][3] , vel_Dance1);\ndelay(delay_Dance1);}}}\nvoid Left_Foot_Support(){ \nfor(int z=0; z<16; z++) {\nif ( z > 5 && z < 14) {\n vel_Dance2 = 50;delay_Dance2 = 200; }\n else { \n vel_Dance2 = 25;\ndelay_Dance2 = 750; }\nRU.slowmove (array_cal[0] + array_dance2[z][0] , vel_Dance2);\nRL.slowmove (array_cal[1] + array_dance2[z][1] , vel_Dance2);\nLU.slowmove (array_cal[2] + array_dance2[z][2] , vel_Dance2);\n LL.slowmove (array_cal[3] + array_dance2[z][3] , vel_Dance2);\ndelay(delay_Dance2); }}\nvoid Dancing1_2(){ \nSlide_2_Left(2);\n Left_Foot_Support(); }\nvoid Dancing4() { \n for(int z=0; z<num_dance4; z++) { \n if ( z > 17) { \n vel_Dance4 = 10; \n delay_Dance4 = 1500;} \n else { \nvel_Dance4 = 40; \n delay_Dance4 = 400;} \n RU.slowmove (array_cal[0] + array_dance4[z][0] , vel_Dance4); \n RL.slowmove (array_cal[1] + array_dance4[z][1] , vel_Dance4); \n LU.slowmove (array_cal[2] + array_dance4[z][2] , vel_Dance4); \n LL.slowmove (array_cal[3] + array_dance4[z][3] , vel_Dance4); \n delay(delay_Dance4);}}\nvoid Dancing3(int Times = 1, int Vel = 40, int Delay = 250, int low = 0, int high = 0){ \nfor(int time3=0; time3<Times; time3++) { \n for(int z=0; z<6; z++) { if ( time3 > 1 && time3 < 4) { \n  vel_Dance3 = Vel; \ndelay_Dance3 = Delay; }\n else { vel_Dance3 = 40; \ndelay_Dance3 = 200;}\nRU.slowmove (array_cal[0] + array_dance3[z][0] , vel_Dance3); \nRL.slowmove (array_cal[1] + array_dance3[z][1] , vel_Dance3); \n LU.slowmove (array_cal[2] + array_dance3[z][2] , vel_Dance3);\n LL.slowmove (array_cal[3] + array_dance3[z][3] , vel_Dance3); \ndelay(delay_Dance3);}}\nfor(int z=6; z<8; z++) { \nRU.slowmove (array_cal[0] + array_dance3[z][0] , vel_Dance3);\nRL.slowmove (array_cal[1] + array_dance3[z][1] , vel_Dance3);\nLU.slowmove (array_cal[2] + array_dance3[z][2] , vel_Dance3);\nLL.slowmove (array_cal[3] + array_dance3[z][3] , vel_Dance3);\n delay(delay_Dance3);}}';
   Blockly.Arduino.setups_['setup_jz_'] ='#ifdef RUN \nServo_Init();\nAdjust();\nRL.slowmove (array_cal[1] , vel);\nLL.slowmove (array_cal[3] , vel);\n delay(2000);\n#endif\n ';
   var code =' Dancing1_2(); \n ';
  return code ;
};


//dancing-two
Blockly.Arduino.Dofrobot_dancingtwo = function() {
  var dropdown_pin = this.getTitleValue('PIN');
   Blockly.Arduino.definitions_['define_irev'] = '#include "VarSpeedServo.h" \n#include <NewPing.h>';
   Blockly.Arduino.definitions_['define_irevee'] = 'VarSpeedServo RU; \nVarSpeedServo RL;\nVarSpeedServo LU;\nVarSpeedServo LL;\nNewPing sonar(5,4,200); \nconst int vel = 50, vel_Back = 15, vel_turn= 15;\nconst int delay_Forward = 300, delay_Back = 750, delay_turn = 500;\nint vel_Dance1 = 30,vel_Dance2 = 25,    vel_Dance3 = 40;  \nint delay_Dance1 = 300,delay_Dance2 = 750, delay_Dance3 = 200;\n int vel_Dance4 = 20, delay_Dance4 = 400;\nconst int array_cal[4] = {102,85,90,90};\nint RU_Degree = 0, LU_Degree = array_cal[2] + 5;\nconst int num1 = 6;\nconst int array_forward[num1][4] = \n{\n{0,-40,0,-20},\n{30,-40,30,-20},\n{30,0,30,0},\n{0,20,0,40},\n{-30,20,-30,40},{-30,0,-30,0},\n};\nconst int num3 = 5;\nconst int array_left[num3][4] = \n{\n{-40,0,-20,0},\n {-40,30,-20,30},\n {0,30,0,30},\n {30,0,30,0},\n {0,0,0,0},\n};\nconst int num4 = 5; \n const int array_right[num4][4] = { \n{40,0,20,0},\n{40,-30,20,-30},\n {0,-30,0,-30},\n{-30,0,-30,0},\n{0,0,0,0},\n};\n const int num_dance1 = 10; \nconst int array_dance1[num_dance1][4] ={ \n{0,-20,0,0},\n {0,-40,0,20},\n {0,-20,0,40},\n{0,0,0,20},\n{0,0,0,0},\n {0,0,0,20},\n{0,-20,0,40},\n{0,-40,0,20},\n {0,-20,0,0},\n {0,0,0,0},\n};const int num_dance2 = 32; \nconst int array_dance2[num_dance2][4] = { \n{20,0,40,0},\n{20,-30,10,-30},\n {20,-30,10,-30},\n{20,-30,40,-30},\n{20,-30,10,-30},\n{20,-30,40,-30},\n{20,0,40,-30},\n{20,80,40,-30},\n{20,0,40,-30},\n{20,-80,40,-30},\n{20,0,40,-30},\n{20,80,40,-30},\n{20,0,40,-30},\n{20,-30,40,-30},\n{20,0,40,0},\n{0,0,0,0},\n{-40,0,-20,0},\n{-40,40,-20,30},\n{-20,40,-20,30},\n{-40,40,-20,30},\n{-20,40,-20,30},\n{-40,40,-20,30},\n{-40,40,-20,0},\n{-40,40,-20,-80},\n{-40,40,-20,0},\n{-40,40,-20,80},\n{-40,40,-20,0},\n{-40,40,-20,-80},\n{-40,40,-20,0},\n{-40,40,-20,30},\n{-40,0,-20,0},\n{0,0,0,0}, };\nconst int num_dance4 = 20; \n const int array_dance4[num_dance4][4] = { \n {0,-20,0,0}, \n{0,-40,0,20}, \n{0,0,0,0}, \n {0,-20,0,20}, \n {0,0,0,0}, \n{0,-20,0,20}, \n {0,0,0,0}, \n  {0,-20,0,20}, \n {0,0,0,0}, \n{0,-50,0,50}, \n{0,0,0,0},\n{0,-50,0,50},\n{0,0,0,0},\n {0,-50,0,50},\n{0,0,0,0},\n {0,-40,0,40},\n{0,-40,0,40},\n{0,-60,0,60},\n{0,0,0,0,},};\nconst int num_dance3 = 8; \n const int array_dance3[num_dance3][4] ={ \n{0,-40,0,0}, \n {20,-30,20,20}, \n {40,0,40,30},\n{0,0,0,40},\n {-20,-20,-20,30},\n{-40,-30,-40,0},\n{0,-40,0,0},\n {0,0,0,0}, };\n';  
   Blockly.Arduino.definitions_['define_ireve'] ='#define RUN\nvoid Servo_Init()\n{\nRU.attach(9);\nRL.attach(10);\nLU.attach(11); \nLL.attach(12);\n}\nvoid Adjust()\n{ \n for(RU_Degree = array_cal[0] - 5; RU_Degree <= array_cal[0]; RU_Degree += 1) {\nRU.write(RU_Degree); \n LU.write(LU_Degree--);\ndelay(15); \n }\n}\nbool TooClose()\n{\nint tooclose = 0;\nfor(int a=0; a<5; a++) { \n delay(50);\nint din = sonar.ping_in();\nif (din < 7 && din > 0) tooclose++;\n }\nif (tooclose < 5) return 1;\nreturn 0;\n}\nvoid Forward()\n{\nfor(int x=0; x<num1; x++) {\n RU.slowmove (array_cal[0] + array_forward[x][0] , vel); \n RL.slowmove (array_cal[1] + array_forward[x][1] , vel);\n LU.slowmove (array_cal[2] + array_forward[x][2] , vel);\n LL.slowmove (array_cal[3] + array_forward[x][3] , vel);\n delay(delay_Forward);\n}\n}\nvoid Turnleft()\n{\n for(int z=0; z<2; z++) {  \nfor(int y=0; y<num3; y++) { \nRU.slowmove (array_cal[0] + array_left[y][0] , vel_Back);\nRL.slowmove (array_cal[1] + array_left[y][1] , vel_Back);\nLU.slowmove (array_cal[2] + array_left[y][2] , vel_Back);\nLL.slowmove (array_cal[3] + array_left[y][3] , vel_Back);\ndelay(delay_Back);\n}\n}\n}\nvoid Turnright(){ \nfor(int z=0; z<2; z++) {\n for(int y=0; y<num4; y++) { \nRU.slowmove (array_cal[0] + array_right[y][0] , vel_Back); \nRL.slowmove (array_cal[1] + array_right[y][1] , vel_Back); \nLU.slowmove (array_cal[2] + array_right[y][2] , vel_Back); \nLL.slowmove (array_cal[3] + array_right[y][3] , vel_Back); \ndelay(delay_Back);\n}}}\nvoid Slide_2_Left(int times){\nfor(int time1 = 0; time1 < times; time1++) {\nfor(int z=0; z<5; z++) {\nvel_Dance2 = 50;\nRU.slowmove (array_cal[0] + array_dance1[z][0] , vel_Dance1);\nLU.slowmove (array_cal[2] + array_dance1[z][2] , vel_Dance1); \n LL.slowmove (array_cal[3] + array_dance1[z][3] , vel_Dance1);\ndelay(delay_Dance1);}}}\nvoid Left_Foot_Support(){ \nfor(int z=0; z<16; z++) {\nif ( z > 5 && z < 14) {\n vel_Dance2 = 50;delay_Dance2 = 200; }\n else { \n vel_Dance2 = 25;\ndelay_Dance2 = 750; }\nRU.slowmove (array_cal[0] + array_dance2[z][0] , vel_Dance2);\nRL.slowmove (array_cal[1] + array_dance2[z][1] , vel_Dance2);\nLU.slowmove (array_cal[2] + array_dance2[z][2] , vel_Dance2);\n LL.slowmove (array_cal[3] + array_dance2[z][3] , vel_Dance2);\ndelay(delay_Dance2); }}\nvoid Dancing1_2(){ \nSlide_2_Left(2);\n Left_Foot_Support(); }\nvoid Dancing4() { \n for(int z=0; z<num_dance4; z++) { \n if ( z > 17) { \n vel_Dance4 = 10; \n delay_Dance4 = 1500;} \n else { \nvel_Dance4 = 40; \n delay_Dance4 = 400;} \n RU.slowmove (array_cal[0] + array_dance4[z][0] , vel_Dance4); \n RL.slowmove (array_cal[1] + array_dance4[z][1] , vel_Dance4); \n LU.slowmove (array_cal[2] + array_dance4[z][2] , vel_Dance4); \n LL.slowmove (array_cal[3] + array_dance4[z][3] , vel_Dance4); \n delay(delay_Dance4);}}\nvoid Dancing3(int Times = 1, int Vel = 40, int Delay = 250, int low = 0, int high = 0){ \nfor(int time3=0; time3<Times; time3++) { \n for(int z=0; z<6; z++) { if ( time3 > 1 && time3 < 4) { \n  vel_Dance3 = Vel; \ndelay_Dance3 = Delay; }\n else { vel_Dance3 = 40; \ndelay_Dance3 = 200;}\nRU.slowmove (array_cal[0] + array_dance3[z][0] , vel_Dance3); \nRL.slowmove (array_cal[1] + array_dance3[z][1] , vel_Dance3); \n LU.slowmove (array_cal[2] + array_dance3[z][2] , vel_Dance3);\n LL.slowmove (array_cal[3] + array_dance3[z][3] , vel_Dance3); \ndelay(delay_Dance3);}}\nfor(int z=6; z<8; z++) { \nRU.slowmove (array_cal[0] + array_dance3[z][0] , vel_Dance3);\nRL.slowmove (array_cal[1] + array_dance3[z][1] , vel_Dance3);\nLU.slowmove (array_cal[2] + array_dance3[z][2] , vel_Dance3);\nLL.slowmove (array_cal[3] + array_dance3[z][3] , vel_Dance3);\n delay(delay_Dance3);}}';
   Blockly.Arduino.setups_['setup_jz_'] ='#ifdef RUN \nServo_Init();\nAdjust();\nRL.slowmove (array_cal[1] , vel);\nLL.slowmove (array_cal[3] , vel);\n delay(2000);\n#endif\n ';
   var code =' Dancing4();\n  ';
  return code ;
};

//
Blockly.Arduino.Dofrobot_dancingthree = function() {
  var dropdown_pin = this.getTitleValue('PIN');
   Blockly.Arduino.definitions_['define_irev'] = '#include "VarSpeedServo.h" \n#include <NewPing.h>';
   Blockly.Arduino.definitions_['define_irevee'] = 'VarSpeedServo RU; \nVarSpeedServo RL;\nVarSpeedServo LU;\nVarSpeedServo LL;\nNewPing sonar(5,4,200); \nconst int vel = 50, vel_Back = 15, vel_turn= 15;\nconst int delay_Forward = 300, delay_Back = 750, delay_turn = 500;\nint vel_Dance1 = 30,vel_Dance2 = 25,    vel_Dance3 = 40;  \nint delay_Dance1 = 300,delay_Dance2 = 750, delay_Dance3 = 200;\n int vel_Dance4 = 20, delay_Dance4 = 400;\nconst int array_cal[4] = {102,85,90,90};\nint RU_Degree = 0, LU_Degree = array_cal[2] + 5;\nconst int num1 = 6;\nconst int array_forward[num1][4] = \n{\n{0,-40,0,-20},\n{30,-40,30,-20},\n{30,0,30,0},\n{0,20,0,40},\n{-30,20,-30,40},{-30,0,-30,0},\n};\nconst int num3 = 5;\nconst int array_left[num3][4] = \n{\n{-40,0,-20,0},\n {-40,30,-20,30},\n {0,30,0,30},\n {30,0,30,0},\n {0,0,0,0},\n};\nconst int num4 = 5; \n const int array_right[num4][4] = { \n{40,0,20,0},\n{40,-30,20,-30},\n {0,-30,0,-30},\n{-30,0,-30,0},\n{0,0,0,0},\n};\n const int num_dance1 = 10; \nconst int array_dance1[num_dance1][4] ={ \n{0,-20,0,0},\n {0,-40,0,20},\n {0,-20,0,40},\n{0,0,0,20},\n{0,0,0,0},\n {0,0,0,20},\n{0,-20,0,40},\n{0,-40,0,20},\n {0,-20,0,0},\n {0,0,0,0},\n};const int num_dance2 = 32; \nconst int array_dance2[num_dance2][4] = { \n{20,0,40,0},\n{20,-30,10,-30},\n {20,-30,10,-30},\n{20,-30,40,-30},\n{20,-30,10,-30},\n{20,-30,40,-30},\n{20,0,40,-30},\n{20,80,40,-30},\n{20,0,40,-30},\n{20,-80,40,-30},\n{20,0,40,-30},\n{20,80,40,-30},\n{20,0,40,-30},\n{20,-30,40,-30},\n{20,0,40,0},\n{0,0,0,0},\n{-40,0,-20,0},\n{-40,40,-20,30},\n{-20,40,-20,30},\n{-40,40,-20,30},\n{-20,40,-20,30},\n{-40,40,-20,30},\n{-40,40,-20,0},\n{-40,40,-20,-80},\n{-40,40,-20,0},\n{-40,40,-20,80},\n{-40,40,-20,0},\n{-40,40,-20,-80},\n{-40,40,-20,0},\n{-40,40,-20,30},\n{-40,0,-20,0},\n{0,0,0,0}, };\nconst int num_dance4 = 20; \n const int array_dance4[num_dance4][4] = { \n {0,-20,0,0}, \n{0,-40,0,20}, \n{0,0,0,0}, \n {0,-20,0,20}, \n {0,0,0,0}, \n{0,-20,0,20}, \n {0,0,0,0}, \n  {0,-20,0,20}, \n {0,0,0,0}, \n{0,-50,0,50}, \n{0,0,0,0},\n{0,-50,0,50},\n{0,0,0,0},\n {0,-50,0,50},\n{0,0,0,0},\n {0,-40,0,40},\n{0,-40,0,40},\n{0,-60,0,60},\n{0,0,0,0,},};\nconst int num_dance3 = 8; \n const int array_dance3[num_dance3][4] ={ \n{0,-40,0,0}, \n {20,-30,20,20}, \n {40,0,40,30},\n{0,0,0,40},\n {-20,-20,-20,30},\n{-40,-30,-40,0},\n{0,-40,0,0},\n {0,0,0,0}, };\n';  
   Blockly.Arduino.definitions_['define_ireve'] ='#define RUN\nvoid Servo_Init()\n{\nRU.attach(9);\nRL.attach(10);\nLU.attach(11); \nLL.attach(12);\n}\nvoid Adjust()\n{ \n for(RU_Degree = array_cal[0] - 5; RU_Degree <= array_cal[0]; RU_Degree += 1) {\nRU.write(RU_Degree); \n LU.write(LU_Degree--);\ndelay(15); \n }\n}\nbool TooClose()\n{\nint tooclose = 0;\nfor(int a=0; a<5; a++) { \n delay(50);\nint din = sonar.ping_in();\nif (din < 7 && din > 0) tooclose++;\n }\nif (tooclose < 5) return 1;\nreturn 0;\n}\nvoid Forward()\n{\nfor(int x=0; x<num1; x++) {\n RU.slowmove (array_cal[0] + array_forward[x][0] , vel); \n RL.slowmove (array_cal[1] + array_forward[x][1] , vel);\n LU.slowmove (array_cal[2] + array_forward[x][2] , vel);\n LL.slowmove (array_cal[3] + array_forward[x][3] , vel);\n delay(delay_Forward);\n}\n}\nvoid Turnleft()\n{\n for(int z=0; z<2; z++) {  \nfor(int y=0; y<num3; y++) { \nRU.slowmove (array_cal[0] + array_left[y][0] , vel_Back);\nRL.slowmove (array_cal[1] + array_left[y][1] , vel_Back);\nLU.slowmove (array_cal[2] + array_left[y][2] , vel_Back);\nLL.slowmove (array_cal[3] + array_left[y][3] , vel_Back);\ndelay(delay_Back);\n}\n}\n}\nvoid Turnright(){ \nfor(int z=0; z<2; z++) {\n for(int y=0; y<num4; y++) { \nRU.slowmove (array_cal[0] + array_right[y][0] , vel_Back); \nRL.slowmove (array_cal[1] + array_right[y][1] , vel_Back); \nLU.slowmove (array_cal[2] + array_right[y][2] , vel_Back); \nLL.slowmove (array_cal[3] + array_right[y][3] , vel_Back); \ndelay(delay_Back);\n}}}\nvoid Slide_2_Left(int times){\nfor(int time1 = 0; time1 < times; time1++) {\nfor(int z=0; z<5; z++) {\nvel_Dance2 = 50;\nRU.slowmove (array_cal[0] + array_dance1[z][0] , vel_Dance1);\nLU.slowmove (array_cal[2] + array_dance1[z][2] , vel_Dance1); \n LL.slowmove (array_cal[3] + array_dance1[z][3] , vel_Dance1);\ndelay(delay_Dance1);}}}\nvoid Left_Foot_Support(){ \nfor(int z=0; z<16; z++) {\nif ( z > 5 && z < 14) {\n vel_Dance2 = 50;delay_Dance2 = 200; }\n else { \n vel_Dance2 = 25;\ndelay_Dance2 = 750; }\nRU.slowmove (array_cal[0] + array_dance2[z][0] , vel_Dance2);\nRL.slowmove (array_cal[1] + array_dance2[z][1] , vel_Dance2);\nLU.slowmove (array_cal[2] + array_dance2[z][2] , vel_Dance2);\n LL.slowmove (array_cal[3] + array_dance2[z][3] , vel_Dance2);\ndelay(delay_Dance2); }}\nvoid Dancing1_2(){ \nSlide_2_Left(2);\n Left_Foot_Support(); }\nvoid Dancing4() { \n for(int z=0; z<num_dance4; z++) { \n if ( z > 17) { \n vel_Dance4 = 10; \n delay_Dance4 = 1500;} \n else { \nvel_Dance4 = 40; \n delay_Dance4 = 400;} \n RU.slowmove (array_cal[0] + array_dance4[z][0] , vel_Dance4); \n RL.slowmove (array_cal[1] + array_dance4[z][1] , vel_Dance4); \n LU.slowmove (array_cal[2] + array_dance4[z][2] , vel_Dance4); \n LL.slowmove (array_cal[3] + array_dance4[z][3] , vel_Dance4); \n delay(delay_Dance4);}}\nvoid Dancing3(int Times = 1, int Vel = 40, int Delay = 250, int low = 0, int high = 0){ \nfor(int time3=0; time3<Times; time3++) { \n for(int z=0; z<6; z++) { if ( time3 > 1 && time3 < 4) { \n  vel_Dance3 = Vel; \ndelay_Dance3 = Delay; }\n else { vel_Dance3 = 40; \ndelay_Dance3 = 200;}\nRU.slowmove (array_cal[0] + array_dance3[z][0] , vel_Dance3); \nRL.slowmove (array_cal[1] + array_dance3[z][1] , vel_Dance3); \n LU.slowmove (array_cal[2] + array_dance3[z][2] , vel_Dance3);\n LL.slowmove (array_cal[3] + array_dance3[z][3] , vel_Dance3); \ndelay(delay_Dance3);}}\nfor(int z=6; z<8; z++) { \nRU.slowmove (array_cal[0] + array_dance3[z][0] , vel_Dance3);\nRL.slowmove (array_cal[1] + array_dance3[z][1] , vel_Dance3);\nLU.slowmove (array_cal[2] + array_dance3[z][2] , vel_Dance3);\nLL.slowmove (array_cal[3] + array_dance3[z][3] , vel_Dance3);\n delay(delay_Dance3);}}';
   Blockly.Arduino.setups_['setup_jz_'] ='#ifdef RUN \nServo_Init();\nAdjust();\nRL.slowmove (array_cal[1] , vel);\nLL.slowmove (array_cal[3] , vel);\n delay(2000);\n#endif\n ';
   var code =' Dancing3(5,20,400);\n  ';
  return code ;
};







